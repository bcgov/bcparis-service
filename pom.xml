<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>ca.bc.gov.bcparis</groupId>
	<artifactId>bcparis-service</artifactId>
	<name>BCPARIS Legacy Migration</name>
	<version>1.2.0-SNAPSHOT</version>

	<properties>
		<sonar.exclusions>
			**/QuartzConfiguration.java,
			**/AutoWiringSpringBeanJobFactory.java,
			**/SwaggerConfig.java
		</sonar.exclusions>

		<!-- ========== Enforce ========== -->
		<java.version>1.8</java.version>
		<!-- 3.3.9 is the most recent version supported by Red Hat Jenkins slave
            images. We can't go to 3.5 -->
		<maven.version>3.3.9</maven.version>

		<!-- ========== Text Encoding ========== -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>


		<!-- ========= Maven Plugins Versions ========= -->
		<maven-help-plugin.version>2.2</maven-help-plugin.version>
		<maven-javadoc-plugin.version>3.2.0</maven-javadoc-plugin.version>
		<maven-properties-plugin.version>1.0.0</maven-properties-plugin.version>
		<maven-source-plugin.version>3.0.1</maven-source-plugin.version>
		<maven-resources-plugin.version>3.0.2</maven-resources-plugin.version>
		<maven-clean-plugin.version>2.5</maven-clean-plugin.version>
		<maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
		<maven-surefire-plugin.version>2.18.1</maven-surefire-plugin.version>
		<maven-jar-plugin.version>3.0.2</maven-jar-plugin.version>
		<maven-war-plugin.version>3.1.0</maven-war-plugin.version>
		<maven-rpm-plugin.version>2.2.0</maven-rpm-plugin.version>
		<maven-antrun-plugin.version>1.8</maven-antrun-plugin.version>
		<maven-install-plugin.version>2.5.2</maven-install-plugin.version>
		<maven-deploy-plugin.version>2.8.2</maven-deploy-plugin.version>
		<maven-enforcer-plugin.version>1.4.1</maven-enforcer-plugin.version>
		<maven-jacoco-plugin.version>0.7.9</maven-jacoco-plugin.version>
		<codehaus-versions-maven-plugin.version>2.8.1</codehaus-versions-maven-plugin.version>
		<codehaus-versions-maven-plugin.rulesUri>${user.home}/.m2/maven-version-rules.xml
		</codehaus-versions-maven-plugin.rulesUri>

		<maven-jaxb2-plugin.version>0.12.3</maven-jaxb2-plugin.version>
		<soapui-maven-plugin.version>5.4.0</soapui-maven-plugin.version>
		<dependency-check-maven.version>5.2.1</dependency-check-maven.version>
		<!-- skip excessive CVE update checks for a designated duration in hours -->
		<dependency-check-maven.cveValidForHours>12</dependency-check-maven.cveValidForHours>
		<!-- typical PCI scanning requirements are to FAIL at CVSS >= 4.0 -->
		<dependency-check-maven.failBuildOnCVSS>4</dependency-check-maven.failBuildOnCVSS>
		<dependency-check-maven.suppressionFile>${user.home}/.m2/dependency-check-suppressions.xml
		</dependency-check-maven.suppressionFile>

		<springboot.version>2.2.3.RELEASE</springboot.version>
		<springcloud.version>Greenwich.RELEASE</springcloud.version>
		<swagger-springmvc.version>1.0.2</swagger-springmvc.version>
		<springfox.version>2.9.2</springfox.version>

		<maven-springboot-plugin.version>${springboot.version}</maven-springboot-plugin.version>

		<springframework.version>5.2.3.RELEASE</springframework.version>
		<spring-security.version>5.3.4.RELEASE</spring-security.version>
		<spring-test.version>${springframework.version}</spring-test.version>
		<metrics-spring.version>3.1.3</metrics-spring.version>

		<junit.version>4.12</junit.version>
		<lombok.version>1.18.12</lombok.version>
		<jackson.version>2.10.0</jackson.version>
		<slf4j.version>1.7.25</slf4j.version>
		<logback.version>1.2.3</logback.version>
		<logstash.version>5.3</logstash.version>
		<splunk.version>1.7.1</splunk.version>
		<httpclient.version>4.5.7</httpclient.version>
		<guava.version>29.0-jre</guava.version>
	</properties>

	<distributionManagement>
		<repository>
			<id>releases</id>
			<name>Releases Repository</name>
			<url>https://nexus-iamp.pathfinder.gov.bc.ca/repository/maven-releases/</url>
			<layout>default</layout>
		</repository>
		<snapshotRepository>
			<id>snapshots</id>
			<name>Snapshots Repository</name>
			<url>https://nexus-iamp.pathfinder.gov.bc.ca/repository/maven-snapshots/</url>
			<layout>default</layout>
		</snapshotRepository>
	</distributionManagement>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
				<exclusions>
					<exclusion>
						<artifactId>hamcrest-core</artifactId>
						<groupId>org.hamcrest</groupId>
					</exclusion>
				</exclusions>
				<scope>test</scope>
			</dependency>

			<dependency>
				<groupId>org.projectlombok</groupId>
				<artifactId>lombok</artifactId>
				<version>${lombok.version}</version>
				<scope>provided</scope>
			</dependency>

			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-core</artifactId>
				<version>${jackson.version}</version>
			</dependency>

			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-databind</artifactId>
				<version>${jackson.version}</version>
			</dependency>

			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-annotations</artifactId>
				<version>${jackson.version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.httpcomponents</groupId>
				<artifactId>httpclient</artifactId>
				<version>${httpclient.version}</version>
			</dependency>

			<!-- Logging -->
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>${slf4j.version}</version>
			</dependency>

			<dependency>
				<groupId>net.logstash.logback</groupId>
				<artifactId>logstash-logback-encoder</artifactId>
				<version>${logstash.version}</version>
			</dependency>

			<!-- Splunk -->
			<dependency>
				<groupId>com.splunk.logging</groupId>
				<artifactId>splunk-library-javalogging</artifactId>
				<version>${splunk.version}</version>
			</dependency>

			<dependency>
				<groupId>com.google.guava</groupId>
				<artifactId>guava</artifactId>
				<version>${guava.version}</version>
			</dependency>

			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context</artifactId>
				<version>${springframework.version}</version>
			</dependency>

			<dependency>
				<groupId>org.springframework.security</groupId>
				<artifactId>spring-security-core</artifactId>
				<version>${spring-security.version}</version>
			</dependency>

			<dependency>
				<groupId>org.springframework.security</groupId>
				<artifactId>spring-security-web</artifactId>
				<version>${spring-security.version}</version>
			</dependency>

			<dependency>
				<groupId>org.springframework.security</groupId>
				<artifactId>spring-security-config</artifactId>
				<version>${spring-security.version}</version>
			</dependency>

			<dependency>
				<groupId>org.springframework.security</groupId>
				<artifactId>spring-security-crypto</artifactId>
				<version>${spring-security.version}</version>
			</dependency>

			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-test</artifactId>
				<version>${spring-test.version}</version>
				<scope>test</scope>
			</dependency>

			<dependency>
				<groupId>com.ryantenney.metrics</groupId>
				<artifactId>metrics-spring</artifactId>
				<version>${metrics-spring.version}</version>
				<exclusions>
					<exclusion>
						<groupId>org.apache.httpcomponents</groupId>
						<artifactId>httpcore</artifactId>
					</exclusion>
				</exclusions>
			</dependency>

			<!-- ====== SPRING BOOT Dependencies ====== -->
			<dependency>
				<!-- Import dependency management from Spring Boot -->
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>${springboot.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<!-- ====== SPRING CLOUD Dependencies ====== -->
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${springcloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<!-- ====== SWAGGER UI Dependencies ====== -->
			<dependency>
				<groupId>com.mangofactory</groupId>
				<artifactId>swagger-springmvc</artifactId>
				<version>${swagger-springmvc.version}</version>
				<exclusions>
					<exclusion>
						<groupId>org.springframework</groupId>
						<artifactId>spring-webmvc</artifactId>
					</exclusion>
				</exclusions>
			</dependency>

			<dependency>
				<groupId>io.springfox</groupId>
				<artifactId>springfox-swagger2</artifactId>
				<version>${springfox.version}</version>
			</dependency>

			<dependency>
				<groupId>io.springfox</groupId>
				<artifactId>springfox-swagger-ui</artifactId>
				<version>${springfox.version}</version>
			</dependency>

			<dependency>
				<groupId>io.springfox</groupId>
				<artifactId>springfox-core</artifactId>
				<version>${springfox.version}</version>
			</dependency>

			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-test</artifactId>
				<version>${springboot.version}</version>
				<scope>test</scope>
			</dependency>

		</dependencies>
	</dependencyManagement>

	<dependencies>

		<!-- Spring Cloud Config -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>

		<!-- Quartz for satellite job -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-quartz</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>8.0.17</version>
		</dependency>
        
        <dependency>
            <groupId>com.splunk.logging</groupId>
            <artifactId>splunk-library-javalogging</artifactId>
            <version>1.6.2</version>
        </dependency>

		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.6</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-core</artifactId>
		</dependency>

		<!-- Enabling health checks and metrics -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<!-- Micormeter core dependecy -->
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-core</artifactId>
		</dependency>

		<!-- Micrometer Prometheus registry -->
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-registry-prometheus</artifactId>
		</dependency>

		<!-- Enabling distributed tracing -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-sleuth</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-zipkin</artifactId>
		</dependency>

		<!-- Swagger -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<exclusions>
				<exclusion>
					<groupId>com.google.guava</groupId>
					<artifactId>guava</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
		</dependency>

		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
		</dependency>

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
		</dependency>

		<dependency>
			<groupId>net.logstash.logback</groupId>
			<artifactId>logstash-logback-encoder</artifactId>
		</dependency>
	</dependencies>

	<build>
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<filtering>true</filtering>
			</testResource>
		</testResources>

		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-help-plugin</artifactId>
					<version>${maven-help-plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>properties-maven-plugin</artifactId>
					<version>${maven-properties-plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-source-plugin</artifactId>
					<version>${maven-source-plugin.version}</version>
					<configuration>
					</configuration>
					<executions>
						<execution>
							<id>attach-sources</id>
							<phase>verify</phase>
							<goals>
								<goal>jar-no-fork</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>${maven-resources-plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-clean-plugin</artifactId>
					<version>${maven-clean-plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${maven-compiler-plugin.version}</version>
					<configuration>
						<source>${java.version}</source>
						<target>${java.version}</target>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>${maven-javadoc-plugin.version}</version>
					<configuration>
						<javadocExecutable>${java.home}/./../bin</javadocExecutable>
						<!-- Disabling javadoc formatting check for Java 8 -->
						<additionalparam>-Xdoclint:none</additionalparam>
					</configuration>
					<executions>
						<execution>
							<id>attach-javadoc</id>
							<phase>verify</phase>
							<goals>
								<goal>jar</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<!-- Extend the default jar plugin config to force generation of a MANIFEST
                    file. -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<version>${maven-jar-plugin.version}</version>
					<configuration>
						<skip>true</skip>
						<archive>
							<addMavenDescriptor>true</addMavenDescriptor>
							<manifest>
								<useUniqueVersions>false</useUniqueVersions>
								<addClasspath>true</addClasspath>
								<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
								<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
								<classpathPrefix>lib/</classpathPrefix>
								<classpathLayoutType>simple</classpathLayoutType>
							</manifest>
						</archive>
					</configuration>
				</plugin>

				<!-- Extend the default war plugin config to generate a Manifest file
                    with all info inside. -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-war-plugin</artifactId>
					<version>${maven-war-plugin.version}</version>
					<configuration>
						<warSourceDirectory>${project.basedir}/src/main/webapp</warSourceDirectory>
						<!--<packagingExcludes>WEB-INF/lib/*</packagingExcludes> -->
						<!--<archiveClasses>true</archiveClasses> -->
						<outputDirectory>${project.build.directory}/webapps</outputDirectory>
						<failOnMissingWebXml>false</failOnMissingWebXml>
						<!--<webXml>${project.basedir}/src/main/webapp/WEB-INF/web.xml</webXml> -->
						<archive>
							<addMavenDescriptor>true</addMavenDescriptor>
							<manifest>
								<addClasspath>true</addClasspath>
								<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
								<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
								<classpathPrefix>lib/</classpathPrefix>
								<classpathLayoutType>simple</classpathLayoutType>
							</manifest>
						</archive>
					</configuration>
					<executions>
						<execution>
							<id>default-war</id>
							<phase>package</phase>
							<goals>
								<goal>war</goal>
								<goal>exploded</goal>
							</goals>
							<configuration>
								<!--<skip>true</skip> -->
							</configuration>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>${maven-surefire-plugin.version}</version>
					<inherited>true</inherited>
					<configuration>
						<skip>${skipTests}</skip>
						<includes>
							<include>**/*Test*.java</include>
						</includes>
					</configuration>
					<executions>
						<execution>
							<configuration>
								<!--<forkMode>never</forkMode> -->
								<argLine>${argLine} -Xmx512m</argLine>
							</configuration>
							<id>default-test</id>
							<phase>test</phase>
							<goals>
								<goal>test</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-report-plugin</artifactId>
					<version>${maven-surefire-plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>${maven-jacoco-plugin.version}</version>
					<configuration>
						<skip>true</skip>
						<destFile>${basedir}/target/coverage-reports/jacoco-unit.exec</destFile>
						<dataFile>${basedir}/target/coverage-reports/jacoco-unit.exec</dataFile>
					</configuration>
					<executions>
						<execution>
							<id>default-prepare-agent</id>
							<goals>
								<goal>prepare-agent</goal>
							</goals>
						</execution>
						<execution>
							<id>default-report</id>
							<phase>prepare-package</phase>
							<goals>
								<goal>report</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<!-- To check dependencies update run the command: -->
					<!-- mvn versions::display-dependency-updates -->
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>versions-maven-plugin</artifactId>
					<version>${codehaus-versions-maven-plugin.version}</version>
					<configuration>
						<outputFile>outdated-dependencies.txt</outputFile>
						<rulesUri>${codehaus-versions-maven-plugin.rulesUri}</rulesUri>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-install-plugin</artifactId>
					<version>${maven-install-plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>${maven-deploy-plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-enforcer-plugin</artifactId>
					<version>${maven-enforcer-plugin.version}</version>
					<executions>
						<execution>
							<id>enforce-versions</id>
							<goals>
								<goal>enforce</goal>
							</goals>
							<configuration>
								<!--<fail>false</fail> -->
								<!-- By default it's set to true -->
								<!--<failFast>true</failFast> -->
								<!-- Fails on the first rule that doesn't pass -->
								<rules>
									<requireMavenVersion>
										<version>[${maven.version},)</version>
									</requireMavenVersion>
									<requireJavaVersion>
										<version>[${java.version},)</version>
									</requireJavaVersion>
									<!--<requireProperty> -->
									<!--<level>WARN</level> -->
									<!-- will only display a warning but does not fail the build -->
									<!--<property>project.groupId</property> <regex>com\.opticca\.services</regex>
                                        <regexMessage>groupId must be com.opticca.services</regexMessage> </requireProperty> -->
									<banDistributionManagement>
										<message>Only the parent-pom can define distribution
											management
										</message>
										<!--Message seems ignored for this rule but this might get fixed
                                            later -->
									</banDistributionManagement>
									<requireNoRepositories>
										<message>Only the parent-pom must define repositories</message>
									</requireNoRepositories>
									<banDuplicatePomDependencyVersions>
										<message>The same dependency is declared with more than 1
											version
										</message>
									</banDuplicatePomDependencyVersions>
									<requireReleaseDeps>
										<!--<searchTransitive>false</searchTransitive> -->
										<onlyWhenRelease>true</onlyWhenRelease>
										<failWhenParentIsSnapshot>true</failWhenParentIsSnapshot>
										<message>Snapshots are not allowed for production releases</message>
										<!--<excludes> <exclude>org.apache.maven:maven-core</exclude> <exclude>org.apache.maven.plugins:*</exclude>
                                            </excludes> -->
									</requireReleaseDeps>
								</rules>
							</configuration>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>org.jvnet.jaxb2.maven2</groupId>
					<artifactId>maven-jaxb2-plugin</artifactId>
					<version>${maven-jaxb2-plugin.version}</version>
					<executions>
						<execution>
							<id>xsd-generate</id>
							<goals>
								<goal>generate</goal>
							</goals>
							<configuration>
								<generateDirectory>${project.build.directory}/generated-sources</generateDirectory>
								<schemaDirectory>src/main/resources/xml</schemaDirectory>
								<extension>true</extension>
							</configuration>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>com.smartbear.soapui</groupId>
					<artifactId>soapui-maven-plugin</artifactId>
					<version>${soapui-maven-plugin.version}</version>
					<configuration>
						<projectFile>${soapui.project}</projectFile>
						<printReport>true</printReport>
						<outputFolder>${basedir}/target/soapui-output</outputFolder>
						<junitReport>true</junitReport>
						<soapuiProperties>
							<property>
								<name>soapui.properties</name>
								<value>${soapui.properties}</value>
							</property>
						</soapuiProperties>
					</configuration>
					<dependencies>
						<dependency>
							<groupId>edu.stanford.nlp</groupId>
							<artifactId>stanford-corenlp</artifactId>
							<version>3.9.1</version>
						</dependency>
						<dependency>
							<groupId>com.jgoodies</groupId>
							<artifactId>forms</artifactId>
							<version>1.2.1</version>
						</dependency>
					</dependencies>
				</plugin>

				<plugin>
					<groupId>org.owasp</groupId>
					<artifactId>dependency-check-maven</artifactId>
					<version>${dependency-check-maven.version}</version>
					<configuration>
						<assemblyAnalyzerEnabled>false</assemblyAnalyzerEnabled>
						<!-- skip excessive CVE update checks for a designated duration in hours -->
						<cveValidForHours>${dependency-check-maven.cveValidForHours}</cveValidForHours>
						<!-- typical PCI scanning requirements are to FAIL at CVSS >= 4.0 -->
						<failBuildOnCVSS>${dependency-check-maven.failBuildOnCVSS}</failBuildOnCVSS>
						<suppressionFile>${dependency-check-maven.suppressionFile}</suppressionFile>
					</configuration>
					<executions>
						<execution>
							<goals>
								<goal>check</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
					<version>${maven-springboot-plugin.version}</version>
					<executions>
						<execution>
							<id>generate-build-info</id>
							<phase>generate-resources</phase>
							<goals>
								<goal>build-info</goal>
							</goals>
							<configuration>
								<additionalProperties>
									<encoding.source>${project.build.sourceEncoding}</encoding.source>
									<encoding.output>${project.reporting.outputEncoding}</encoding.output>
									<!--<java.source.name>${java.runtime.name}</java.source.name> <java.source.version>${java.runtime.version}</java.source.version>
                                        <java.target>${java.version}</java.target> <module.name>${demo.module.name}</module.name> -->
								</additionalProperties>
							</configuration>
						</execution>
						<execution>
							<id>repackage-fat_jarwar</id>
							<phase>package</phase>
							<goals>
								<goal>repackage</goal>
							</goals>
							<configuration>
								<skip>true</skip>
								<finalName>${project.build.finalName}-deployable</finalName>
								<excludeDevtools>false</excludeDevtools>
							</configuration>
						</execution>
						<execution>
							<id>repackage-fat_jarwar_as_unix_binary</id>
							<phase>package</phase>
							<goals>
								<goal>repackage</goal>
							</goals>
							<configuration>
								<skip>true</skip>
								<finalName>${project.build.finalName}-bin</finalName>
								<executable>true</executable>
								<excludeDevtools>true</excludeDevtools>
							</configuration>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>rpm-maven-plugin</artifactId>
					<version>${maven-rpm-plugin.version}</version>
					<extensions>true</extensions>
					<executions>
						<execution>
							<id>generate-rpm</id>
							<goals>
								<goal>attached-rpm</goal>
							</goals>
							<phase>package</phase>
						</execution>
					</executions>
					<configuration>
						<group>Development</group>
						<description>Maven RPM Package</description>
						<mappings>
							<mapping>
								<directory>/${app.home}/bin/</directory>
								<!--This is the directory where the files in this mapping will be
                                    installed when the package is installed. This value must start with / -->
								<artifact />

							</mapping>
							<!--Shawn Sterling from Sourced requested we remove this to avoid
                                Transaction Check Error. Said wasn't needed. <mapping> <directory>/etc/init.d/</directory>
                                </mapping> -->

						</mappings>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>

		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
			</plugin>

			<plugin>
				<!-- To check dependencies update run the command: -->
				<!-- mvn versions::display-dependency-updates -->
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>versions-maven-plugin</artifactId>
				<inherited>true</inherited>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>enable-deployable-src-artifacts</id>
			<!-- This profile will be automatically activated if the directory "src"
                exists in the root of the project -->
			<activation>
				<file>
					<exists>src</exists>
				</file>
			</activation>

			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-install-plugin</artifactId>
						<configuration>
							<skip>false</skip>
						</configuration>
					</plugin>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-deploy-plugin</artifactId>
						<configuration>
							<skip>false</skip>
						</configuration>
					</plugin>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-release-plugin</artifactId>
						<configuration>
						</configuration>
					</plugin>
				</plugins>

			</build>
		</profile>

		<profile>
			<id>enable-build-java-artifacts</id>
			<!-- This profile will be automatically activated if the directory "src"
                exists in the root of the project -->
			<activation>
				<file>
					<exists>src/main/java</exists>
				</file>
			</activation>

			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-compiler-plugin</artifactId>
						<configuration>
							<skip>false</skip>
						</configuration>
					</plugin>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-source-plugin</artifactId>
						<configuration>
							<skipSource>false</skipSource>
						</configuration>
					</plugin>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
						<configuration>
							<skip>true</skip>
						</configuration>
					</plugin>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
					</plugin>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-report-plugin</artifactId>
					</plugin>

					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<configuration>
							<skip>false</skip>
						</configuration>
					</plugin>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-jar-plugin</artifactId>
						<configuration>
							<skip>false</skip>
						</configuration>
					</plugin>
				</plugins>

				<resources>
					<resource>
						<directory>src/main/resources</directory>
						<filtering>true</filtering>
					</resource>
				</resources>
			</build>
		</profile>

		<profile>
			<id>maven-debug</id>

			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>${version.maven-antrun-plugin}</version>
						<executions>
							<execution>
								<phase>validate</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<property environment="env"/>
										<echo>Displaying value of all properties...</echo>
										<echoproperties/>
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>version-replacer</id>

			<build>
				<plugins>

					<!-- This plugin has one execution configured to replace the version
                        of the module. -->
					<plugin>
						<groupId>com.google.code.maven-replacer-plugin</groupId>
						<artifactId>replacer</artifactId>
						<version>${version.maven-replacer-plugin}</version>
						<executions>
							<execution>
								<id>replace-module-version</id>
								<!--<phase>none</phase> -->
								<goals>
									<goal>replace</goal>
								</goals>
								<configuration>
									<basedir>.</basedir>
									<!--<basedir></basedir> -->
									<file>pom.xml</file>
									<!--<filesToInclude>*/**/pom.xml</filesToInclude> -->
									<includes>
										<include>pom.xml</include>
										<include>*/**/pom.xml</include>
									</includes>
									<ignoreMissingFile>false</ignoreMissingFile>
									<ignoreErrors>false</ignoreErrors>
									<replacements>
										<replacement>
											<xpath>/project/version/text()</xpath>
											<token>(.+)</token>
											<value>${app.version}</value>
										</replacement>
									</replacements>
									<regex>true</regex>
									<regexFlags>
										<regexFlag>MULTILINE</regexFlag>
									</regexFlags>
								</configuration>
							</execution>

							<execution>
								<id>replace-parent-version</id>
								<!--<phase>none</phase> -->
								<goals>
									<goal>replace</goal>
								</goals>
								<configuration>
									<basedir>.</basedir>
									<!--<basedir></basedir> -->
									<file>pom.xml</file>
									<!--<filesToInclude>*/**/pom.xml</filesToInclude> -->
									<includes>
										<include>*/**/pom.xml</include>
									</includes>
									<excludes>
										<exclude>parent/pom.xml</exclude>
									</excludes>
									<ignoreMissingFile>false</ignoreMissingFile>
									<ignoreErrors>false</ignoreErrors>
									<replacements>
										<replacement>
											<xpath>/project/parent/version/text()</xpath>
											<token>(.+)</token>
											<value>${app.version}</value>
										</replacement>
									</replacements>
									<regex>true</regex>
									<regexFlags>
										<regexFlag>MULTILINE</regexFlag>
									</regexFlags>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!--Enables the production of HTML versions of the Surefire reports. The
            output directory and names were selected to facilitate the storage of the
            reports as Bamboo build artifacts which allows the reports to be downloaded
            from the Bamboo plan console -->
		<profile>
			<id>enable-html-surefire-reports</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-report-plugin</artifactId>
						<configuration>
							<!--session.executionRootDirectory is directory from which mvn command
                                is invoked -->
							<outputDirectory>${session.executionRootDirectory}/test-reports</outputDirectory>
							<outputName>${project.artifactId}-${project.version}-surefire-report</outputName>
						</configuration>
						<executions>
							<execution>
								<phase>test</phase>
								<goals>
									<goal>report-only</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>enable-maven-jaxb2-plugin</id>

			<activation>
				<file>
					<exists>src/main/resources/xml</exists>
				</file>
			</activation>

			<build>
				<plugins>
					<plugin>
						<groupId>org.jvnet.jaxb2.maven2</groupId>
						<artifactId>maven-jaxb2-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>


		<profile>
			<id>enable-soapui-maven-plugin</id>

			<activation>
				<file>
					<exists>src</exists>
				</file>
			</activation>

			<build>
				<plugins>
					<plugin>
						<groupId>com.smartbear.soapui</groupId>
						<artifactId>soapui-maven-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>


		<profile>
			<id>enable-spring-boot-maven-plugin</id>
			<!-- This profile will be automatically activated if the directory "bin"
                exists in the root of the project -->
			<!-- A bin folder assumes this is the main app module that generates the
                executable binaries. -->
			<activation>
				<file>
					<exists>src/main/java</exists>
				</file>
			</activation>

			<build>
				<plugins>

					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>generate-build-info</id>
							</execution>
							<execution>
								<id>repackage-fat_jarwar</id>
								<configuration>
									<skip>true</skip>
								</configuration>
							</execution>
							<execution>
								<id>repackage-fat_jarwar_as_unix_binary</id>
								<configuration>
									<skip>false</skip>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>enable-rpm-maven-plugin</id>

			<activation>
				<os>
					<family>Linux</family>
				</os>
				<file>
					<exists>rpm</exists>
				</file>
			</activation>

			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>rpm-maven-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>
